/**
 * Zurich-GI
 * Zurich General Insurance API. You will need a producer code to use this API.  -- DISCLAIMER: Please note that the GI API is currently in beta stage. Some features might not work as expected and responses can take up to several seconds. Stick to the provided samples and use mocks if required. ---
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH }                                         from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class AccountApi {
    protected basePath = 'https://api.insurhack.com/apis/gi/1';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
	
	/**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }

    /**
     * Gets a list of account entities
     * 
     * @param $Expand expand
     * @param $Filter filter on properties
     */
    public accountSetGet($Expand?: string, $Filter?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.accountSetGetWithHttpInfo($Expand, $Filter, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Creates an account
     * 
     * @param payload Request Body
     */
    public accountSetPost(payload: models.Payload1, extraHttpRequestParams?: any): Observable<{}> {
        return this.accountSetPostWithHttpInfo(payload, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Gets an account by id
     * 
     * @param publicID 
     * @param $Expand 
     */
    public accountSetpublicIDGet(publicID: string, $Expand?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.accountSetpublicIDGetWithHttpInfo(publicID, $Expand, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Gets a list of contacts
     * Returns list of zde.entities.Contact entities.
     * @param $Expand 
     * @param $Filter 
     */
    public contactSetGet($Expand?: string, $Filter?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.contactSetGetWithHttpInfo($Expand, $Filter, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get a contact by id
     * 
     * @param publicID 
     * @param $Expand 
     */
    public contactSetpublicIDGet(publicID: string, $Expand?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.contactSetpublicIDGetWithHttpInfo(publicID, $Expand, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * Gets a list of account entities
     * 
     * @param $Expand expand
     * @param $Filter filter on properties
     */
    public accountSetGetWithHttpInfo($Expand?: string, $Filter?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/Account_Set`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if ($Expand !== undefined) {
            queryParameters.set('$expand', <any>$Expand);
        }
        if ($Filter !== undefined) {
            queryParameters.set('$filter', <any>$Filter);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Creates an account
     * 
     * @param payload Request Body
     */
    public accountSetPostWithHttpInfo(payload: models.Payload1, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/Account_Set`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'payload' is not null or undefined
        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling accountSetPost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: payload == null ? '' : JSON.stringify(payload), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Gets an account by id
     * 
     * @param publicID 
     * @param $Expand 
     */
    public accountSetpublicIDGetWithHttpInfo(publicID: string, $Expand?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/Account_Set(&#39;${publicID}&#39;)`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'publicID' is not null or undefined
        if (publicID === null || publicID === undefined) {
            throw new Error('Required parameter publicID was null or undefined when calling accountSetpublicIDGet.');
        }
        if ($Expand !== undefined) {
            queryParameters.set('$expand', <any>$Expand);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Gets a list of contacts
     * Returns list of zde.entities.Contact entities.
     * @param $Expand 
     * @param $Filter 
     */
    public contactSetGetWithHttpInfo($Expand?: string, $Filter?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/Contact_Set`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if ($Expand !== undefined) {
            queryParameters.set('$expand', <any>$Expand);
        }
        if ($Filter !== undefined) {
            queryParameters.set('$filter', <any>$Filter);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get a contact by id
     * 
     * @param publicID 
     * @param $Expand 
     */
    public contactSetpublicIDGetWithHttpInfo(publicID: string, $Expand?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/Contact_Set(&#39;${publicID}&#39;)`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'publicID' is not null or undefined
        if (publicID === null || publicID === undefined) {
            throw new Error('Required parameter publicID was null or undefined when calling contactSetpublicIDGet.');
        }
        if ($Expand !== undefined) {
            queryParameters.set('$expand', <any>$Expand);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
