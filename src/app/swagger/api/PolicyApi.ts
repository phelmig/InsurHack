/**
 * Zurich-GI
 * Zurich General Insurance API. You will need a producer code to use this API.  -- DISCLAIMER: Please note that the GI API is currently in beta stage. Some features might not work as expected and responses can take up to several seconds. Stick to the provided samples and use mocks if required. ---
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH }                                         from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class PolicyApi {
    protected basePath = 'https://api.insurhack.com/apis/gi/1';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
        this.defaultHeaders.append("Authorization", "Bearer "+ this.configuration.accessToken);
    }
	
	/**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }

    /**
     * Gets a list of policy period enteties
     * Policy Period allows a point in time reconstruction of all key policy attributes.
     * @param $Expand 
     * @param $Filter 
     */
    public policyPeriodSetGet($Expand?: string, $Filter?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.policyPeriodSetGetWithHttpInfo($Expand, $Filter, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Creates a policy period
     * 
     * @param payload Request Body
     */
    public policyPeriodSetPost(payload: models.Payload2, extraHttpRequestParams?: any): Observable<{}> {
        return this.policyPeriodSetPostWithHttpInfo(payload, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Gets a policy period by id
     * 
     * @param publicID 
     * @param $Expand 
     */
    public policyPeriodSetpublicIDGet(publicID: string, $Expand?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.policyPeriodSetpublicIDGetWithHttpInfo(publicID, $Expand, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Updates a policy period
     * 
     * @param publicID 
     * @param payload Request Body
     */
    public policyPeriodSetpublicIDPost(publicID: string, payload?: models.Payload3, extraHttpRequestParams?: any): Observable<{}> {
        return this.policyPeriodSetpublicIDPostWithHttpInfo(publicID, payload, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Binds an order based on a policy period
     * 
     * @param publicID 
     * @param payload Request Body
     */
    public policyPeriodSetpublicIDZdeActionsBindOrderPost(publicID: string, payload?: models.Payload4, extraHttpRequestParams?: any): Observable<{}> {
        return this.policyPeriodSetpublicIDZdeActionsBindOrderPostWithHttpInfo(publicID, payload, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Quotes an offer based on a policy period
     * 
     * @param publicID 
     * @param payload Request Body
     */
    public policyPeriodSetpublicIDZdeActionsQuoteOfferPost(publicID: string, payload?: models.Payload5, extraHttpRequestParams?: any): Observable<{}> {
        return this.policyPeriodSetpublicIDZdeActionsQuoteOfferPostWithHttpInfo(publicID, payload, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Quotes an order based on a policy period
     * 
     * @param publicID 
     * @param payload Request Body
     */
    public policyPeriodSetpublicIDZdeActionsQuoteOrderPost(publicID: string, payload?: models.Payload6, extraHttpRequestParams?: any): Observable<{}> {
        return this.policyPeriodSetpublicIDZdeActionsQuoteOrderPostWithHttpInfo(publicID, payload, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Gets a basic rating
     * 
     * @param payload Request Body
     */
    public policyPeriodSetZdeActionsGetRatingPost(payload?: models.Payload7, extraHttpRequestParams?: any): Observable<{}> {
        return this.policyPeriodSetZdeActionsGetRatingPostWithHttpInfo(payload, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Gets a list of policies
     * 
     * @param $Expand 
     * @param $Filter 
     */
    public policySetGet($Expand?: string, $Filter?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.policySetGetWithHttpInfo($Expand, $Filter, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Gets a policy by id
     * 
     * @param publicID 
     * @param $Expand 
     */
    public policySetpublicIDGet(publicID: string, $Expand?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.policySetpublicIDGetWithHttpInfo(publicID, $Expand, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * Gets a list of policy period enteties
     * Policy Period allows a point in time reconstruction of all key policy attributes.
     * @param $Expand 
     * @param $Filter 
     */
    public policyPeriodSetGetWithHttpInfo($Expand?: string, $Filter?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/PolicyPeriod_Set`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if ($Expand !== undefined) {
            queryParameters.set('$expand', <any>$Expand);
        }
        if ($Filter !== undefined) {
            queryParameters.set('$filter', <any>$Filter);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Creates a policy period
     * 
     * @param payload Request Body
     */
    public policyPeriodSetPostWithHttpInfo(payload: models.Payload2, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/PolicyPeriod_Set`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'payload' is not null or undefined
        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling policyPeriodSetPost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: payload == null ? '' : JSON.stringify(payload), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Gets a policy period by id
     * 
     * @param publicID 
     * @param $Expand 
     */
    public policyPeriodSetpublicIDGetWithHttpInfo(publicID: string, $Expand?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/PolicyPeriod_Set(&#39;${publicID}&#39;)`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'publicID' is not null or undefined
        if (publicID === null || publicID === undefined) {
            throw new Error('Required parameter publicID was null or undefined when calling policyPeriodSetpublicIDGet.');
        }
        if ($Expand !== undefined) {
            queryParameters.set('$expand', <any>$Expand);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Updates a policy period
     * 
     * @param publicID 
     * @param payload Request Body
     */
    public policyPeriodSetpublicIDPostWithHttpInfo(publicID: string, payload?: models.Payload3, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/PolicyPeriod_Set(&#39;${publicID}&#39;)`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'publicID' is not null or undefined
        if (publicID === null || publicID === undefined) {
            throw new Error('Required parameter publicID was null or undefined when calling policyPeriodSetpublicIDPost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: payload == null ? '' : JSON.stringify(payload), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Binds an order based on a policy period
     * 
     * @param publicID 
     * @param payload Request Body
     */
    public policyPeriodSetpublicIDZdeActionsBindOrderPostWithHttpInfo(publicID: string, payload?: models.Payload4, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + "/PolicyPeriod_Set('"+publicID+"')/zde.actions.BindOrder";

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'publicID' is not null or undefined
        if (publicID === null || publicID === undefined) {
            throw new Error('Required parameter publicID was null or undefined when calling policyPeriodSetpublicIDZdeActionsBindOrderPost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: payload == null ? '' : JSON.stringify(payload), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Quotes an offer based on a policy period
     * 
     * @param publicID 
     * @param payload Request Body
     */
    public policyPeriodSetpublicIDZdeActionsQuoteOfferPostWithHttpInfo(publicID: string, payload?: models.Payload5, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + "/PolicyPeriod_Set('"+publicID+"')/zde.actions.QuoteOffer";
        console.log(path);
        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'publicID' is not null or undefined
        if (publicID === null || publicID === undefined) {
            throw new Error('Required parameter publicID was null or undefined when calling policyPeriodSetpublicIDZdeActionsQuoteOfferPost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,

            body: payload == null ? '' : JSON.stringify(payload), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Quotes an order based on a policy period
     * 
     * @param publicID 
     * @param payload Request Body
     */
    public policyPeriodSetpublicIDZdeActionsQuoteOrderPostWithHttpInfo(publicID: string, payload?: models.Payload6, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + "/PolicyPeriod_Set('"+publicID+"')/zde.actions.QuoteOrder";

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'publicID' is not null or undefined
        if (publicID === null || publicID === undefined) {
            throw new Error('Required parameter publicID was null or undefined when calling policyPeriodSetpublicIDZdeActionsQuoteOrderPost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: payload == null ? '' : JSON.stringify(payload), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Gets a basic rating
     * 
     * @param payload Request Body
     */
    public policyPeriodSetZdeActionsGetRatingPostWithHttpInfo(payload?: models.Payload7, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/PolicyPeriod_Set/zde.actions.GetRating`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: payload == null ? '' : JSON.stringify(payload), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Gets a list of policies
     * 
     * @param $Expand 
     * @param $Filter 
     */
    public policySetGetWithHttpInfo($Expand?: string, $Filter?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/Policy_Set`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if ($Expand !== undefined) {
            queryParameters.set('$expand', <any>$Expand);
        }
        if ($Filter !== undefined) {
            queryParameters.set('$filter', <any>$Filter);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Gets a policy by id
     * 
     * @param publicID 
     * @param $Expand 
     */
    public policySetpublicIDGetWithHttpInfo(publicID: string, $Expand?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/Policy_Set(&#39;${publicID}&#39;)`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'publicID' is not null or undefined
        if (publicID === null || publicID === undefined) {
            throw new Error('Required parameter publicID was null or undefined when calling policySetpublicIDGet.');
        }
        if ($Expand !== undefined) {
            queryParameters.set('$expand', <any>$Expand);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
